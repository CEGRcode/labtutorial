{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nIntroduction\n\n\nThis tutorial is updated as of May 28, 2018 by Hedgie Jo.\nOriginally written by Prashant Kuntala in 8th March, 2018.\n\n\nThis page was made using mkdocs, for more information visit \nmkdocs.org\n.\n\n\nQuick Commands\n\n\nList of main commands and their purpose.\n\n\nGalaxy\n\n\n\n\nsh run.sh\n - run the local galaxy instance\n\n\ngrails\n - install dependencies\n\n\n\n\nPlanemo\n\n\n\n\nplanemo tool_init --id 'wrap' --name 'Tool Wrapper'\n - generate xml file\n\n\nplanemo l\n - wrapper syntax check for the galaxy coding standard\n\n\nplanemo t\n - test tool functionality\n\n\nplanemo s\n - serve planemo on local host\n\n\n\n\nPEGR\n\n\n\n\nmysql.server start\n - start the sql server, in this case the local pegr instance\n\n\ngrails run-app\n - start the grails app\nmysql\n Create database pegr; # create pegr database\nmysql\n use pegr;             # set pegr as the database\nmysql\n source pegrDB.sql     # use the sql server\nmysql\n show tables;          # view tables\n\n\n\n\n\n\n\nGrails\n\n\n\n\ngrails\n - install local dependencies\n\n\ngrails run-app\n - start the grails app\n\n\n\n\nProject layout\n\n\nmkdocs.yml      # The configuration file.\ndocs/\n    index.md    # The documentation homepage.\n    galaxy.md   # Galaxy tutorial\n    planemo.md  # Planemo tutorial\n    pegr.md     # PEGR tutorial\n    grails.md   # Grails Groovy tutorial\n    debug.md    # Debugging help\n    faq.md      # Frequently Asked Questions\n\n\n\nNavigation\n\n\nHere are some tips on how to navigate through the site.\n\n\n- Navigation Bar: select any pages you want to view\n- Search: search any keyword on the site\n- Previous: Go back to the previous page\n- Next: Move forward to the next page", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome", 
            "text": "", 
            "title": "Welcome"
        }, 
        {
            "location": "/#introduction", 
            "text": "This tutorial is updated as of May 28, 2018 by Hedgie Jo.\nOriginally written by Prashant Kuntala in 8th March, 2018.  This page was made using mkdocs, for more information visit  mkdocs.org .", 
            "title": "Introduction"
        }, 
        {
            "location": "/#quick-commands", 
            "text": "List of main commands and their purpose.  Galaxy   sh run.sh  - run the local galaxy instance  grails  - install dependencies   Planemo   planemo tool_init --id 'wrap' --name 'Tool Wrapper'  - generate xml file  planemo l  - wrapper syntax check for the galaxy coding standard  planemo t  - test tool functionality  planemo s  - serve planemo on local host   PEGR   mysql.server start  - start the sql server, in this case the local pegr instance  grails run-app  - start the grails app mysql  Create database pegr; # create pegr database\nmysql  use pegr;             # set pegr as the database\nmysql  source pegrDB.sql     # use the sql server\nmysql  show tables;          # view tables    Grails   grails  - install local dependencies  grails run-app  - start the grails app", 
            "title": "Quick Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml      # The configuration file.\ndocs/\n    index.md    # The documentation homepage.\n    galaxy.md   # Galaxy tutorial\n    planemo.md  # Planemo tutorial\n    pegr.md     # PEGR tutorial\n    grails.md   # Grails Groovy tutorial\n    debug.md    # Debugging help\n    faq.md      # Frequently Asked Questions", 
            "title": "Project layout"
        }, 
        {
            "location": "/#navigation", 
            "text": "Here are some tips on how to navigate through the site.  - Navigation Bar: select any pages you want to view\n- Search: search any keyword on the site\n- Previous: Go back to the previous page\n- Next: Move forward to the next page", 
            "title": "Navigation"
        }, 
        {
            "location": "/galaxy/", 
            "text": "Galaxy\n\n\nPre-Install\n\n\nInstall samtools (locally) on your machine if it is not already installed.\n\n\n\n\n$ brew install samtools\n # (mac)\n\n\nhttp://samtools.sourceforge.net/-Install\n # (other)\n\n\n\n\nInstall yarn on your machine, if not already installed.\n\n\n\n\n$ brew install yarn\n # (mac)\n\n\nhttps://yarnpkg.com/en/docs/install\n # (other)\n\n\n\n\nInstall Local Galaxy\n\n\n\n\nGo to the tutorial link:  \ngalaxyproject.org/admin/#get-galaxy\n\n\nClone the galaxy somewhere lower in the directory structure to avoid conda issues and problems. BEST CHOICE: clone it to your ~/Desktop\n\n\n$ git clone -b release_17.09 https://github.com/galaxyproject/galaxy.git\n\n\n$ git branch \u2013a\n # optional\n\n\n\n\n$ git checkout master\n # optional\n\n\n\n\n\n\nGo into the directory \u201cgalaxy\u201d\n\n\n\n\nsh run.sh\n # run galaxy server\n\n\nCouple of dependencies are installed and you should see the galaxy running at localhost:8080\n\n\n\n\nBasic starting point tutorials:\n\n\n\n\ngalaxyproject.org/#learn\n\n\ngithub.com/galaxyproject/#dagobah-training\n\n\n\n\nInstall sacCer3_cegr Genome build into your Local Galaxy\n\n\n\n\nRun the galaxy on http://127.0.0.1:8080.\n\n\nRegister by click on User -\n register\n\n\nUse the following credentials\n\n\nUsername: cegr@psu.edu\n # username should be same to make the api calls work\n\n\nPassword: your_password\n # create a password of your choice\n\n\nCreate a copy of \u201cgalaxy.ini.sample\u201d in Config folder and rename it to \u201cgalaxy.ini\u201d.\n\n\n\n\nThis makes sure that galaxy takes your configurations rather than the default ones.\n- Open the galaxy.ini file and search for \u201cadmin_users\u201d and add the username to have admin access.\n\n\n\n\nInstall the below tools from your admin toolshed. (usually install those with the \u201cOwner\u201d being \u201ciuc\u201d or \u201cdevteam\u201d), because the other \u201cOwners\u201d can have their own version for the tool in the Toolshed.\n\n\n\n\ndata_manager_bwa_mem_index_builderodata_manager_fetch_genome_dbkeys_all_fastaodata_manager_sam_fasta_index_builderodata_manager_twobit_builder\n\n\n\n\nUpload the \u201csacCer3_cegr. fa\u201d fasta file into the galaxy using the \u201cupload button\u201d on the left pane top right corner.\n(available in the data folder, provided along with this documentation).\n\n\n\n\nOnce you have uploaded, you should see the file appear in the \u201chistory pane\u201d on your right.\n\n\n\n\n\n\nGo to Admin portal. Under the \u201cdata\u201d section. Click on localdata.\n\n\n\n\n\n\nYou need to run the following \u201cdata managers tools\u201d that we just installed in the exact order as below:\n\n\n\n\n\n\nCreateDBkey and reference geneomeoTwoBitoBWA-MEM\n\n\n\n\nSAM Fasta\n\n\n\n\n-Below is a screenshot for each of the steps, in the same order of execution.\n-Once you click on the \u201cCreate DBkey and Reference Genome\u201d\n-Fill out the information as below and click \u201cExecute\u201d.\n-You can specify sequence name to be \u201cSacCer3_cegr\u201d and leave everything as default in all the tools.\n\n\n\n\nOnce you have run all the tools, you need to check couple of things populate in the internal databases of galaxy. You can check that information from your \u201cAdmin\u201d page.\n\n\nGo to Admin -\n View Tool Data Table Entries -\n \ndbkeys\n\n\n\n\nSimilarly check \u201call_fasta\u201d,\u201dtwobit\u201d,\u201dbwa_mem_indexes\u201d (all the ones that are bold in the below image, should contain an entry for sacCer3_cegr)\n\n\n\n\n\n\nAbove are the screenshots for three of the database tables, in your local galaxy.\n\n\n\n\nIf you have those entries in the respective tables, then you are good to go.\n\n\n\n\nInstalling the Galaxy / ChIP-exo Workflow into your local instance\n\n\n\n\nGo to https://chipexo-gw.aci.ics.psu.edu/,\n\n\n\n\nLog in with the correct credentials\n\n \nUsername: username\n\n\n \nPassword: password\n\n- You should see the below page.\n\n\nInstalling RepeatMasker on mac (optional, not required for YEPQC pipeline)\n\n\n\n\nGo to the website http://www.repeatmasker.org/RMDownload.html\n\n\nYou need to install the prerequisites first.\n\n\n\n\nPre-Install\n\n\nInstall RMBlast (sequence Search engine): \nRMBlast\n\n\n\n\nYou can just download all the binaries from these two locations based on your machine (mac, linux)\n\n\nftp://ftp.ncbi.nlm.nih.gov/blast/executables/rmblast/2.2.28/\n\n\n\n\nftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.2.28/\n\n\n\n\n\n\nextract them and copy all the binaries into \u201c/usr/local/bin/\u201d so that all users can use them.\n\n\n\n\n\n\nCheck whether you have \u201crmblastn\u201c binary in /usr/local/bin/\n\n\n\n\nIf you don\u2019t then follow the steps in the RMBLAST installation website above.\n\n\n\n\nInstall TFR: \ndownload\n\n\n\n\nNow follow the rest of the instructions on http://www.repeatmasker.org/RMDownload.html\n\n\n\n\nUnder the Installation section:\n\n\nDownload the RepeatMasker.tar.gz\nUncompress and copy it to /usr/local/\ncd /usr/local/RepeatMasker and sudo perl ./configure\nIt prompts for various paths for the executables which we just installed.\nSpecify the paths in correctly and add the path to RepeatMasker to your $PATH\n\n\n\nAdding the cegr galaxy output statistics for the core pipeline.\n\n\n\n\n\n\nReference\n to add new tools into galaxy.\n\n\n\n\n\n\nDownload the tools from \nseqcode\n and copy the cegr_statistics folder into your \u201ctools\u201d folder in galaxy.\n\n\n\n\n\n\nPlease remember that below lines make your galaxy run on port 8090 and local pegr run on port 8080.\n\n\n\n\nConfigure the port for galaxy in \u201cgalaxy.ini\u201d file.\n\n\nYou need to generate an apikey in your local galaxy so that it can communicate with the local PEGR.\n\n\nOn \u201cAdmin/UserManagement\u201d click on \u201cAPI keys\u201d. Click on \u201cGenerate a new key now\u201d. Use that key in the below steps. (make sure you don\u2019t generate keys for the same user twice, it can lead to errors.)\n\n\ncreate a copy of \u201cstats_config.ini.sample\u201d and rename it to \u201ccegr_config.ini.sample\u201d\n\n\n\n\nadd the below lines into the file.\n\n\n\n\n\n\nNow you need to make galaxy know how to use these tools.\n\n\n\n\nGo to your \u201cconfig\u201d folder and make a copy of \u201ctools_conf.xml.main\u201d and rename it to \u201ctools_conf.xml\u201d\n\n\n\n\nAdd below lines at the end of the file within the \n\n\n\n\n\n\nSave and restart galaxy.\n\n\n\n\nYou can edit the pipeline to remove \u201cRepeat masker\u201d in the paired_002\u201d workflow.\n\n\nBelow images show removal of \u201cRepeat masker\u201d and rearranging the workflow.\n\n\n\n\nAdding your workflow id into your Local PEGR DB\n\n\n\n\nEach workflow in galaxy has a unique id that is assigned internally.\n\n\nWe use bioblend framework (python) to access galaxy and retrieve your workflow id.\n\n\nDocumentation: https://bioblend.readthedocs.io/en/latest/api_docs/galaxy/docs.html-You can use the \u201cgetWorkflowid.py\u201d python script to get the workflow id.\nMake sure you replace your galaxy instance url and apikey from your local instance.(script is available in the data folder, provided along with this documentation). Make sure that your galaxy is running before you use the script.\n\n\nYour output from the script looks like below.\n\n\n\n\nCONGRATULATIONS, YOU HAVE SUCCESSFULLY SET UP THE LOCAL GALAXY!", 
            "title": "Galaxy"
        }, 
        {
            "location": "/galaxy/#galaxy", 
            "text": "", 
            "title": "Galaxy"
        }, 
        {
            "location": "/galaxy/#pre-install", 
            "text": "Install samtools (locally) on your machine if it is not already installed.   $ brew install samtools  # (mac)  http://samtools.sourceforge.net/-Install  # (other)   Install yarn on your machine, if not already installed.   $ brew install yarn  # (mac)  https://yarnpkg.com/en/docs/install  # (other)", 
            "title": "Pre-Install"
        }, 
        {
            "location": "/galaxy/#install-local-galaxy", 
            "text": "Go to the tutorial link:   galaxyproject.org/admin/#get-galaxy  Clone the galaxy somewhere lower in the directory structure to avoid conda issues and problems. BEST CHOICE: clone it to your ~/Desktop  $ git clone -b release_17.09 https://github.com/galaxyproject/galaxy.git  $ git branch \u2013a  # optional   $ git checkout master  # optional    Go into the directory \u201cgalaxy\u201d   sh run.sh  # run galaxy server  Couple of dependencies are installed and you should see the galaxy running at localhost:8080   Basic starting point tutorials:   galaxyproject.org/#learn  github.com/galaxyproject/#dagobah-training", 
            "title": "Install Local Galaxy"
        }, 
        {
            "location": "/galaxy/#install-saccer3_cegr-genome-build-into-your-local-galaxy", 
            "text": "Run the galaxy on http://127.0.0.1:8080.  Register by click on User -  register  Use the following credentials  Username: cegr@psu.edu  # username should be same to make the api calls work  Password: your_password  # create a password of your choice  Create a copy of \u201cgalaxy.ini.sample\u201d in Config folder and rename it to \u201cgalaxy.ini\u201d.   This makes sure that galaxy takes your configurations rather than the default ones.\n- Open the galaxy.ini file and search for \u201cadmin_users\u201d and add the username to have admin access.   Install the below tools from your admin toolshed. (usually install those with the \u201cOwner\u201d being \u201ciuc\u201d or \u201cdevteam\u201d), because the other \u201cOwners\u201d can have their own version for the tool in the Toolshed.   data_manager_bwa_mem_index_builderodata_manager_fetch_genome_dbkeys_all_fastaodata_manager_sam_fasta_index_builderodata_manager_twobit_builder   Upload the \u201csacCer3_cegr. fa\u201d fasta file into the galaxy using the \u201cupload button\u201d on the left pane top right corner.\n(available in the data folder, provided along with this documentation).   Once you have uploaded, you should see the file appear in the \u201chistory pane\u201d on your right.    Go to Admin portal. Under the \u201cdata\u201d section. Click on localdata.    You need to run the following \u201cdata managers tools\u201d that we just installed in the exact order as below:    CreateDBkey and reference geneomeoTwoBitoBWA-MEM   SAM Fasta   -Below is a screenshot for each of the steps, in the same order of execution.\n-Once you click on the \u201cCreate DBkey and Reference Genome\u201d\n-Fill out the information as below and click \u201cExecute\u201d.\n-You can specify sequence name to be \u201cSacCer3_cegr\u201d and leave everything as default in all the tools.   Once you have run all the tools, you need to check couple of things populate in the internal databases of galaxy. You can check that information from your \u201cAdmin\u201d page.  Go to Admin -  View Tool Data Table Entries -   dbkeys   Similarly check \u201call_fasta\u201d,\u201dtwobit\u201d,\u201dbwa_mem_indexes\u201d (all the ones that are bold in the below image, should contain an entry for sacCer3_cegr)    Above are the screenshots for three of the database tables, in your local galaxy.   If you have those entries in the respective tables, then you are good to go.", 
            "title": "Install sacCer3_cegr Genome build into your Local Galaxy"
        }, 
        {
            "location": "/galaxy/#installing-the-galaxy-chip-exo-workflow-into-your-local-instance", 
            "text": "Go to https://chipexo-gw.aci.ics.psu.edu/,   Log in with the correct credentials   Username: username    Password: password \n- You should see the below page.", 
            "title": "Installing the Galaxy / ChIP-exo Workflow into your local instance"
        }, 
        {
            "location": "/galaxy/#installing-repeatmasker-on-mac-optional-not-required-for-yepqc-pipeline", 
            "text": "Go to the website http://www.repeatmasker.org/RMDownload.html  You need to install the prerequisites first.", 
            "title": "Installing RepeatMasker on mac (optional, not required for YEPQC pipeline)"
        }, 
        {
            "location": "/galaxy/#pre-install_1", 
            "text": "Install RMBlast (sequence Search engine):  RMBlast   You can just download all the binaries from these two locations based on your machine (mac, linux)  ftp://ftp.ncbi.nlm.nih.gov/blast/executables/rmblast/2.2.28/   ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.2.28/    extract them and copy all the binaries into \u201c/usr/local/bin/\u201d so that all users can use them.    Check whether you have \u201crmblastn\u201c binary in /usr/local/bin/   If you don\u2019t then follow the steps in the RMBLAST installation website above.   Install TFR:  download   Now follow the rest of the instructions on http://www.repeatmasker.org/RMDownload.html   Under the Installation section:  Download the RepeatMasker.tar.gz\nUncompress and copy it to /usr/local/\ncd /usr/local/RepeatMasker and sudo perl ./configure\nIt prompts for various paths for the executables which we just installed.\nSpecify the paths in correctly and add the path to RepeatMasker to your $PATH", 
            "title": "Pre-Install"
        }, 
        {
            "location": "/galaxy/#adding-the-cegr-galaxy-output-statistics-for-the-core-pipeline", 
            "text": "Reference  to add new tools into galaxy.    Download the tools from  seqcode  and copy the cegr_statistics folder into your \u201ctools\u201d folder in galaxy.    Please remember that below lines make your galaxy run on port 8090 and local pegr run on port 8080.   Configure the port for galaxy in \u201cgalaxy.ini\u201d file.  You need to generate an apikey in your local galaxy so that it can communicate with the local PEGR.  On \u201cAdmin/UserManagement\u201d click on \u201cAPI keys\u201d. Click on \u201cGenerate a new key now\u201d. Use that key in the below steps. (make sure you don\u2019t generate keys for the same user twice, it can lead to errors.)  create a copy of \u201cstats_config.ini.sample\u201d and rename it to \u201ccegr_config.ini.sample\u201d   add the below lines into the file.    Now you need to make galaxy know how to use these tools.   Go to your \u201cconfig\u201d folder and make a copy of \u201ctools_conf.xml.main\u201d and rename it to \u201ctools_conf.xml\u201d   Add below lines at the end of the file within the     Save and restart galaxy.   You can edit the pipeline to remove \u201cRepeat masker\u201d in the paired_002\u201d workflow.  Below images show removal of \u201cRepeat masker\u201d and rearranging the workflow.", 
            "title": "Adding the cegr galaxy output statistics for the core pipeline."
        }, 
        {
            "location": "/galaxy/#adding-your-workflow-id-into-your-local-pegr-db", 
            "text": "Each workflow in galaxy has a unique id that is assigned internally.  We use bioblend framework (python) to access galaxy and retrieve your workflow id.  Documentation: https://bioblend.readthedocs.io/en/latest/api_docs/galaxy/docs.html-You can use the \u201cgetWorkflowid.py\u201d python script to get the workflow id.\nMake sure you replace your galaxy instance url and apikey from your local instance.(script is available in the data folder, provided along with this documentation). Make sure that your galaxy is running before you use the script.  Your output from the script looks like below.   CONGRATULATIONS, YOU HAVE SUCCESSFULLY SET UP THE LOCAL GALAXY!", 
            "title": "Adding your workflow id into your Local PEGR DB"
        }, 
        {
            "location": "/planemo/", 
            "text": "Planemo\n\n\nHere is the basic workflow:\n\n\n\n\nPre-Install\n\n\nInstall\n\n\nUsage\n\n\nExample\n\n\n\n\nPre-Install\n\n\nInstall \nanaconda\n (locally) on your machine.\n\n\nInstall wget:\n\n\n\n\n$ brew install wget\n - (mac)\n\n\n$ sudo apt-get install wget\n - (others)\n\n\n\n\nInstall virtual environment:\n\n\n\n\n$ brew install virtualenv\n - (mac)\n\n\n$ sudo apt-get install virtualenv\n - (others)\n\n\n\n\nNOTE: make sure \nlocal galaxy\n is installed.\nCouple of dependencies are installed and you should see the galaxy running at localhost:8080\n\n\nInstall pip:\n\n\n\n\n$ brew install pip\n - (mac)\n\n\n$ sudo apt-get install pip\n - (others)\n\n\n\n\nInstall\n\n\nInstall planemo:\n\n\n\n\n$ virtualenv .venv; . .venv/bin/activate\n\n\n$ pip install \u2013-upgrade pip # Upgrade pip if needed.\n\n\n$ pip install planemo\n\n\n\n\nBasic \ntutorial\n\n\nUsage\n\n\nThis guide assumes that you have already installed Planemo and have a directory with one or more Galaxy tool with input \n output files.\n\n\n1) Init\n\n\nCreate galaxy tool wrapper using the init command.\n\n\n\n\n$ planemo init\n\n\n\n\nExample:\n\n\n$ planemo tool_init\n                --id 'id' \\\n                --name 'Name of the file' \\\n                --description 'Description (optional)' \\\n                --requirement software_version@2.2 \\\n                --example_command 'input \n output command' \\\n                --example_input input_file \\\n                --example_output output_file \\\n                --test_case \\\n                --cite_url 'https://url' \\\n                --help_from_command 'id'\n\n\n\nNOTE: Planemo is unable to partially initialize, for example if your xml file is missing \"citation\" section during linting, in order to add it from the command line you need to initialize the entire wrapper. So it's really for creating a new wrapper not modifying an existing one.\n\n\n2) Lint\n\n\nPlanemo can check review tool for XML validity, syntax errors, and compliance with IUC best practices using the lint (l) command.\n\n\n\n\n$ planemo l\n # same as planemo lint\n\n\n$ planemo l --help\n\n\n\n\nYou will also see the test-data directory generated for testing.\n\n\n3) Test\n\n\nThe test command can be used to test the functionality of tool(s). In other words, it checks if the xml file works as supposed to.\n\n\n\n\n$ planemo test\n - test all the xml files in the current directory\n\n\n$ planemo test --galaxy_root=../galaxy wrapper.xml\n - with optional parameters and specify file(s) to run the test.\n\n\n\n\nBy default, planemo will search parent directories to see if any is a Galaxy instance.\n\n\nImportant note: if you specify --galaxy_root folder, reverting it back might be difficult since the  planemo virtual environment path is set up to the galaxy directory. You can try to force planemo to download a disposable instance with the --install_galaxy flag.\n\n\n\n\nEx: \n$ planemo test --install_galaxy wrapper.xml\n\n\n\n\n4) Serve\n\n\nAfter passing the test we can open Galaxy with the serve (or with s).\n\n\n$ planemo s\n...\nserving on http://127.0.0.1:8086\n\n\n\nExample\n\n\n1) Seqtk\n\n\nUse conda to install Seqtk:\n\n\n\n\n$ conda install --force --yes -c bioconda seqtk=1.2\n\n\n$ seqtk seq\n - check if seqtk is installed\n\n\n\n\nDownload an example FASTQ file\n\n\n\n\n$ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq\n\n\n$ seqtk seq -A 2.fastq \n 2.fasta\n\n\n$ cat 2.fasta\n\n\n\n\nIf you are unable to download or execute the wget command, simply copy \n paste the text and save as both 2.fastq and 2.fasta and continue along the steps:\n\n\nEAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC\n\nEAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA\n\nEAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG\n\n\n\nRun the following command to generate seqtk_seq.xml file. These contain minimal requirements for the xml file.\n\n\n$ planemo tool_init --force \\\n              --id 'seqtk_seq' \\\n              --name 'Convert to FASTA (seqtk)' \\\n              --requirement seqtk@1.2 \\\n              --example_command 'seqtk seq -a 2.fastq \n 2.fasta' \\\n              --example_input 2.fastq \\\n              --example_output 2.fasta \\\n              --test_case \\\n              --cite_url 'https://github.com/lh3/seqtk' \\\n              --help_from_command 'seqtk seq'\n\n\n\nExplanation of each command options (more \nhere\n):\n\n\nid                      Short identifier for new tool (no whitespace).\nforce                   Overwrite existing tool if present.\nname                    Name for new tool.\ndescription             Short description for new tool.\nrequirement             Name of the package.  requirements will be set using Bioconda.\nexample_command         Example to command with paths to build Cheetah template from. Must follow with --example_input and --example_output.\nexample_input           Replace input file.\nexample_output          Replace output file.\ntest_case               Generate test-data directory with tool test cases from the supplied example.\ncite_url                Supply a URL for citation.\nhelp_from_command       Auto populate help from supplied command.\n\n\n\nType the following in the same directory where your seqtk.xml is located.\n\n\n\n\n\n\n$ planemo lint seqtk.xml\n\n\n\n\n\n\nTip: Planemo lint command only checks if the syntax is correct, so if you are unable to pass the lint using planemo, check to make sure the above requirements are satisfied. If output says \"Failed linting\" at the end, see the current \ngithub issues\n.\n\n\n\n\n\n\nOutput:\n\n\n\nFunctionality test\n\n\n$ planemo t\n\n\n\nOutput:\n\n\n$ planemo t\n...\nAll 1 test(s) executed passed.\nseqtk_seq[0]: passed\n\n\n\nIf error occurs, refer to the error report page on GitHub.\n\n\n2) getRandomBed\n\n\nDownload getRandomBed.py tool:\n\n\nUse the planemo commands to generate the xml file getRandomBed.xml\n\n\nSolution:\n\n\nplanemo tool_init --force \\\n                --id 'getRandomBed' \\\n                --name 'Random Bed' \\\n                --requirement python@2.7.14 \\\n                --example_command '$__tool_directory__/genRandomBed.py $inputBed' \\\n                --example_input inputBed \\\n                --example_output randomBed \\\n                --test_case \\\n                --cite_url 'http://www.pughlab.psu.edu/' \\\n                --help_from_command 'getRandomBed'\n\n\n\n3) toolExample.pl\n\n\nConsider the following Perl script.\n\n\n    #!/usr/bin/perl -w\n\n    # usage : perl toolExample.pl \nFASTA file\n \noutput file\n\n\n    open (IN, \"\n$ARGV[0]\");\n    open (OUT, \"\n$ARGV[1]\");\n    while (\nIN\n) {\n        chop;\n        if (m/^\n/) {\n            s/^\n//;\n            if ($. \n 1) {\n                print OUT sprintf(\"%.3f\", $gc/$length) . \"\\n\";\n            }\n            $gc = 0;\n            $length = 0;\n        } else {\n            ++$gc while m/[gc]/ig;\n            $length += length $_;\n        }\n    }\n    print OUT sprintf(\"%.3f\", $gc/$length) . \"\\n\";\n    close( IN );\n    close( OUT ); #__end__\n\n\n\nCreate an xml file for the script with an output as follows:\n\n\ntool id=\"gc_content\" name=\"Compute GC content\"\n\n  \ndescription\nfor each sequence in a file\n/description\n\n  \ncommand\nperl $__tool_directory__/gc_content.pl $input output.tsv\n/command\n\n  \ninputs\n\n    \nparam format=\"fasta\" name=\"input\" type=\"data\" label=\"Source file\"/\n\n  \n/inputs\n\n  \noutputs\n\n    \ndata format=\"tabular\" name=\"output\" from_work_dir=\"output.tsv\" /\n\n  \n/outputs\n\n  \nhelp\n\nThis tool computes GC content from a FASTA file.\n  \n/help\n\n\n/tool\n\n\n\n\nSolution:\n\n\nplanemo tool_init   --force \\\n                    --id 'gc_content' \\\n                    --name 'Compute GC content' \\\n                    --description 'for each sequence in a file' \\\n                    --example_command 'perl $__tool_directory__/gc_content.pl $input output.tsv' \\\n                    --example_input input.fasta \\\n                    --example_output output.tsv \\\n                    --help 'This tool computes GC content from a FASTA file.'\n\n\n\nQ: Will this pass the planemo lint test?\n\n\nA: No it is missing the following parameters:\n\n\n                test_case, requirement, citation, help_from_command", 
            "title": "Planemo"
        }, 
        {
            "location": "/planemo/#planemo", 
            "text": "Here is the basic workflow:   Pre-Install  Install  Usage  Example", 
            "title": "Planemo"
        }, 
        {
            "location": "/planemo/#pre-install", 
            "text": "Install  anaconda  (locally) on your machine.  Install wget:   $ brew install wget  - (mac)  $ sudo apt-get install wget  - (others)   Install virtual environment:   $ brew install virtualenv  - (mac)  $ sudo apt-get install virtualenv  - (others)   NOTE: make sure  local galaxy  is installed.\nCouple of dependencies are installed and you should see the galaxy running at localhost:8080  Install pip:   $ brew install pip  - (mac)  $ sudo apt-get install pip  - (others)", 
            "title": "Pre-Install"
        }, 
        {
            "location": "/planemo/#install", 
            "text": "Install planemo:   $ virtualenv .venv; . .venv/bin/activate  $ pip install \u2013-upgrade pip # Upgrade pip if needed.  $ pip install planemo   Basic  tutorial", 
            "title": "Install"
        }, 
        {
            "location": "/planemo/#usage", 
            "text": "This guide assumes that you have already installed Planemo and have a directory with one or more Galaxy tool with input   output files.", 
            "title": "Usage"
        }, 
        {
            "location": "/planemo/#1-init", 
            "text": "Create galaxy tool wrapper using the init command.   $ planemo init   Example:  $ planemo tool_init\n                --id 'id' \\\n                --name 'Name of the file' \\\n                --description 'Description (optional)' \\\n                --requirement software_version@2.2 \\\n                --example_command 'input   output command' \\\n                --example_input input_file \\\n                --example_output output_file \\\n                --test_case \\\n                --cite_url 'https://url' \\\n                --help_from_command 'id'  NOTE: Planemo is unable to partially initialize, for example if your xml file is missing \"citation\" section during linting, in order to add it from the command line you need to initialize the entire wrapper. So it's really for creating a new wrapper not modifying an existing one.", 
            "title": "1) Init"
        }, 
        {
            "location": "/planemo/#2-lint", 
            "text": "Planemo can check review tool for XML validity, syntax errors, and compliance with IUC best practices using the lint (l) command.   $ planemo l  # same as planemo lint  $ planemo l --help   You will also see the test-data directory generated for testing.", 
            "title": "2) Lint"
        }, 
        {
            "location": "/planemo/#3-test", 
            "text": "The test command can be used to test the functionality of tool(s). In other words, it checks if the xml file works as supposed to.   $ planemo test  - test all the xml files in the current directory  $ planemo test --galaxy_root=../galaxy wrapper.xml  - with optional parameters and specify file(s) to run the test.   By default, planemo will search parent directories to see if any is a Galaxy instance.  Important note: if you specify --galaxy_root folder, reverting it back might be difficult since the  planemo virtual environment path is set up to the galaxy directory. You can try to force planemo to download a disposable instance with the --install_galaxy flag.   Ex:  $ planemo test --install_galaxy wrapper.xml", 
            "title": "3) Test"
        }, 
        {
            "location": "/planemo/#4-serve", 
            "text": "After passing the test we can open Galaxy with the serve (or with s).  $ planemo s\n...\nserving on http://127.0.0.1:8086", 
            "title": "4) Serve"
        }, 
        {
            "location": "/planemo/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/planemo/#1-seqtk", 
            "text": "Use conda to install Seqtk:   $ conda install --force --yes -c bioconda seqtk=1.2  $ seqtk seq  - check if seqtk is installed   Download an example FASTQ file   $ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq  $ seqtk seq -A 2.fastq   2.fasta  $ cat 2.fasta   If you are unable to download or execute the wget command, simply copy   paste the text and save as both 2.fastq and 2.fasta and continue along the steps:  EAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC EAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA EAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG  Run the following command to generate seqtk_seq.xml file. These contain minimal requirements for the xml file.  $ planemo tool_init --force \\\n              --id 'seqtk_seq' \\\n              --name 'Convert to FASTA (seqtk)' \\\n              --requirement seqtk@1.2 \\\n              --example_command 'seqtk seq -a 2.fastq   2.fasta' \\\n              --example_input 2.fastq \\\n              --example_output 2.fasta \\\n              --test_case \\\n              --cite_url 'https://github.com/lh3/seqtk' \\\n              --help_from_command 'seqtk seq'  Explanation of each command options (more  here ):  id                      Short identifier for new tool (no whitespace).\nforce                   Overwrite existing tool if present.\nname                    Name for new tool.\ndescription             Short description for new tool.\nrequirement             Name of the package.  requirements will be set using Bioconda.\nexample_command         Example to command with paths to build Cheetah template from. Must follow with --example_input and --example_output.\nexample_input           Replace input file.\nexample_output          Replace output file.\ntest_case               Generate test-data directory with tool test cases from the supplied example.\ncite_url                Supply a URL for citation.\nhelp_from_command       Auto populate help from supplied command.  Type the following in the same directory where your seqtk.xml is located.    $ planemo lint seqtk.xml    Tip: Planemo lint command only checks if the syntax is correct, so if you are unable to pass the lint using planemo, check to make sure the above requirements are satisfied. If output says \"Failed linting\" at the end, see the current  github issues .    Output:  Functionality test  $ planemo t  Output:  $ planemo t\n...\nAll 1 test(s) executed passed.\nseqtk_seq[0]: passed  If error occurs, refer to the error report page on GitHub.", 
            "title": "1) Seqtk"
        }, 
        {
            "location": "/planemo/#2-getrandombed", 
            "text": "Download getRandomBed.py tool:  Use the planemo commands to generate the xml file getRandomBed.xml  Solution:  planemo tool_init --force \\\n                --id 'getRandomBed' \\\n                --name 'Random Bed' \\\n                --requirement python@2.7.14 \\\n                --example_command '$__tool_directory__/genRandomBed.py $inputBed' \\\n                --example_input inputBed \\\n                --example_output randomBed \\\n                --test_case \\\n                --cite_url 'http://www.pughlab.psu.edu/' \\\n                --help_from_command 'getRandomBed'", 
            "title": "2) getRandomBed"
        }, 
        {
            "location": "/planemo/#3-toolexamplepl", 
            "text": "Consider the following Perl script.      #!/usr/bin/perl -w\n\n    # usage : perl toolExample.pl  FASTA file   output file \n\n    open (IN, \" $ARGV[0]\");\n    open (OUT, \" $ARGV[1]\");\n    while ( IN ) {\n        chop;\n        if (m/^ /) {\n            s/^ //;\n            if ($.   1) {\n                print OUT sprintf(\"%.3f\", $gc/$length) . \"\\n\";\n            }\n            $gc = 0;\n            $length = 0;\n        } else {\n            ++$gc while m/[gc]/ig;\n            $length += length $_;\n        }\n    }\n    print OUT sprintf(\"%.3f\", $gc/$length) . \"\\n\";\n    close( IN );\n    close( OUT ); #__end__  Create an xml file for the script with an output as follows:  tool id=\"gc_content\" name=\"Compute GC content\" \n   description for each sequence in a file /description \n   command perl $__tool_directory__/gc_content.pl $input output.tsv /command \n   inputs \n     param format=\"fasta\" name=\"input\" type=\"data\" label=\"Source file\"/ \n   /inputs \n   outputs \n     data format=\"tabular\" name=\"output\" from_work_dir=\"output.tsv\" / \n   /outputs \n   help \nThis tool computes GC content from a FASTA file.\n   /help  /tool   Solution:  planemo tool_init   --force \\\n                    --id 'gc_content' \\\n                    --name 'Compute GC content' \\\n                    --description 'for each sequence in a file' \\\n                    --example_command 'perl $__tool_directory__/gc_content.pl $input output.tsv' \\\n                    --example_input input.fasta \\\n                    --example_output output.tsv \\\n                    --help 'This tool computes GC content from a FASTA file.'  Q: Will this pass the planemo lint test?  A: No it is missing the following parameters:                  test_case, requirement, citation, help_from_command", 
            "title": "3) toolExample.pl"
        }, 
        {
            "location": "/pegr/", 
            "text": "PEGR\n\n\nHere are the list of tools we will install prior to installing local PEGR:\n\n\n\n\nSdkman\n\n\nGrails\n\n\nGroovy\n\n\nJava\n\n\n\n\nPre-Install\n\n\nInstall curl (For Windows, use Git Bash)\n\n\nInstall sdkman (\ntutorial\n):\n\n\n\n\n$ curl -s \"https://get.sdkman.io\" | bash\n\n\n$ source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n\n\n$ sdk version\n # check your sdkman version\n\n\n\n\nInstall Grails:\n\n\n\n\n$ sdk install grails 2.5.4\n\n\n$ sdk list grails\n      # check your installation of grails\n\n\n\n\n$ sdk use grails 2.5.4\n # change your default grails to version 2.5.4\n\n\n\n\n\n\nNow close the terminal and quit the terminal in your dashboard. [Important!]\n\n\n\n\n\n\nInstall Groovy:\n\n\n\n\n$ sdk install groovy 2.4.4\n\n\n$ sdk list groovy\n # check your current version of groovy\n\n\n\n\nInstall Java:\n\n\n\n\n$ sdk install java 7u141-zulu\n # install Java (specific version needed for current PEGR)\n\n\n$ sdk install java 8u141-zulu\n # alternate version that is also compatible\n\n\n\n\n$ sdk list java\n # Check your current version of java\n\n\n\n\n\n\nNow Close your terminal and quit the terminal on the dashboard.[Need to do above step, if you want to run pegr locally ;)]\n\n\n\n\n\n\n$ grails\n # Make Grails install necessary dependencies\n\n\n\n\nPress ctrl+C to exit the prompt.\n\n\n\n\nPEGR Install\n\n\n\u2022   Go to any directory of your choice and clone the PEGR git repo.\n\n\n\n\n$ git clone https://github.com/seqcode/pegr.git\n # clone \"pegr\" in your directory\n\n\n\n\n\u2022   Navigate to pegr/pegr/grails-app/conf/BuildConfig.groovy and edit these lines\n\n\ngrails.project.target.level = 1.6 -\n grails.project.target.level = 1.7\ngrails.project.source.level = 1.6 -\n grails.project.source.level = 1.7\n\n\n\nDownload the \nMySQL file\n and rename it to pegrDB.sql\n\n\n\n\nGo to System Preferences-\nMySql Icon\n -(other) click to start the SQL server.\n\n\n\n\n$ mysql.server start\n -(mac) if you have installed using homebrew\n\n\n\n\n\n\nOpen the terminal and navigate to the same directory as the pegrDB.sql file\n\n\n\n\n$ mysql -u root -p\n # Connect to your server\n\n\n\n\nThis will prompt you for that password it gave you. [ if you installed MySQL using the .dmg file] otherwise, in the case of homebrew, there is no password set for root. You should be able to see the prompt mysql\n\n\nAfter successfully connected to the MySQL, set the password for root\n\n\nmysql\n ALTER USER \u2018root\u2019@\u2019localhost\u2019 IDENTIFIED BY \u2018\nyour new password\n \u2018;\n\n\n\n\u2022   Create and switch to the new database:\n\n\nmysql\n Create database pegr;\nmysql\n use pegr;\nmysql\n source pegrDB.sql\nmysql\n show tables;\n\n\n\n\u2022 Successful output:\n\n\n\nCreate a new user to access your \u201cpegr\u201d database\n\n\nmysql\n create user \u2018your_ username\u2019@\u2019localhost\u2019 identified by \u2018your_password\u2019;\nmysql\n grant all privileges on *.* to \u2018your_username\u2019@\u2019localhost\u2019;\n\n\n\nFor an example,\n\n\nmysql\n create user hedgiejo@localhost identified by mypassword12;\nmysql\n grant all privileges on *.* to hedgiejo@localhost;\n\n\n\nModify an existing account to gain a login credentials (need a valid non-WebAccess account)\nWithin your pegrDB, locate the user \"labadmin\" and replace the password value:\n\n\nUPDATE user\nset password=\"password\"\nwhere username=\"labadmin\";\n\n\n\nOpen the BuildConfig.groovy file at pegr/grails-app/conf/BuildConfig.groovy and check the plugins block and verify that the build for the tomcat is appropiate to your version and add the below lines within the plugin block\n\n\ncompile \":spring-security-core:2.0.0\"\ncompile \"org.grails.plugins:quartz:1.0.1\"\ncompile \"org.grails.plugins:mail:1.0.7\"\n\n\n\nAlso, within the dependencies block, uncomment runtime 'mysql'  [if it is commented]\n\n\nNow open DataSource.groovy at the pegr/grails-app/conf/DataSource.groovy and edit the datasource block to look like this:\n\n\nenvironments {\n    development {\n        dataSource {\n            dbCreate = \"update\" // one of 'create', 'create-drop', 'update', 'validate', ''\n            url = \"jdbc:mysql://localhost:3306/pegr\"\n            username=\" your_username \"\n            password=\"YOURPASSWORDHERE\"\n        }\n    }\n}\n\n\n\nNow go into the pegr folder and run pegr\n  * \n$ grails run-app\n\n\nThis will successfully start and provide with you an url (http://localhost:8081/pegr)\n- usually which directs you to the login screen of PEGR.\n\n\nLogin using the following labadmin credentials:\n\n\nUsername: labadmin\nPassword: passcode", 
            "title": "PEGR"
        }, 
        {
            "location": "/pegr/#pegr", 
            "text": "Here are the list of tools we will install prior to installing local PEGR:   Sdkman  Grails  Groovy  Java", 
            "title": "PEGR"
        }, 
        {
            "location": "/pegr/#pre-install", 
            "text": "Install curl (For Windows, use Git Bash)  Install sdkman ( tutorial ):   $ curl -s \"https://get.sdkman.io\" | bash  $ source \"$HOME/.sdkman/bin/sdkman-init.sh\"  $ sdk version  # check your sdkman version   Install Grails:   $ sdk install grails 2.5.4  $ sdk list grails       # check your installation of grails   $ sdk use grails 2.5.4  # change your default grails to version 2.5.4    Now close the terminal and quit the terminal in your dashboard. [Important!]    Install Groovy:   $ sdk install groovy 2.4.4  $ sdk list groovy  # check your current version of groovy   Install Java:   $ sdk install java 7u141-zulu  # install Java (specific version needed for current PEGR)  $ sdk install java 8u141-zulu  # alternate version that is also compatible   $ sdk list java  # Check your current version of java    Now Close your terminal and quit the terminal on the dashboard.[Need to do above step, if you want to run pegr locally ;)]    $ grails  # Make Grails install necessary dependencies   Press ctrl+C to exit the prompt.", 
            "title": "Pre-Install"
        }, 
        {
            "location": "/pegr/#pegr-install", 
            "text": "\u2022   Go to any directory of your choice and clone the PEGR git repo.   $ git clone https://github.com/seqcode/pegr.git  # clone \"pegr\" in your directory   \u2022   Navigate to pegr/pegr/grails-app/conf/BuildConfig.groovy and edit these lines  grails.project.target.level = 1.6 -  grails.project.target.level = 1.7\ngrails.project.source.level = 1.6 -  grails.project.source.level = 1.7  Download the  MySQL file  and rename it to pegrDB.sql   Go to System Preferences- MySql Icon  -(other) click to start the SQL server.   $ mysql.server start  -(mac) if you have installed using homebrew    Open the terminal and navigate to the same directory as the pegrDB.sql file   $ mysql -u root -p  # Connect to your server   This will prompt you for that password it gave you. [ if you installed MySQL using the .dmg file] otherwise, in the case of homebrew, there is no password set for root. You should be able to see the prompt mysql  After successfully connected to the MySQL, set the password for root  mysql  ALTER USER \u2018root\u2019@\u2019localhost\u2019 IDENTIFIED BY \u2018 your new password  \u2018;  \u2022   Create and switch to the new database:  mysql  Create database pegr;\nmysql  use pegr;\nmysql  source pegrDB.sql\nmysql  show tables;  \u2022 Successful output:  Create a new user to access your \u201cpegr\u201d database  mysql  create user \u2018your_ username\u2019@\u2019localhost\u2019 identified by \u2018your_password\u2019;\nmysql  grant all privileges on *.* to \u2018your_username\u2019@\u2019localhost\u2019;  For an example,  mysql  create user hedgiejo@localhost identified by mypassword12;\nmysql  grant all privileges on *.* to hedgiejo@localhost;  Modify an existing account to gain a login credentials (need a valid non-WebAccess account)\nWithin your pegrDB, locate the user \"labadmin\" and replace the password value:  UPDATE user\nset password=\"password\"\nwhere username=\"labadmin\";  Open the BuildConfig.groovy file at pegr/grails-app/conf/BuildConfig.groovy and check the plugins block and verify that the build for the tomcat is appropiate to your version and add the below lines within the plugin block  compile \":spring-security-core:2.0.0\"\ncompile \"org.grails.plugins:quartz:1.0.1\"\ncompile \"org.grails.plugins:mail:1.0.7\"  Also, within the dependencies block, uncomment runtime 'mysql'  [if it is commented]  Now open DataSource.groovy at the pegr/grails-app/conf/DataSource.groovy and edit the datasource block to look like this:  environments {\n    development {\n        dataSource {\n            dbCreate = \"update\" // one of 'create', 'create-drop', 'update', 'validate', ''\n            url = \"jdbc:mysql://localhost:3306/pegr\"\n            username=\" your_username \"\n            password=\"YOURPASSWORDHERE\"\n        }\n    }\n}  Now go into the pegr folder and run pegr\n  *  $ grails run-app  This will successfully start and provide with you an url (http://localhost:8081/pegr)\n- usually which directs you to the login screen of PEGR.  Login using the following labadmin credentials:  Username: labadmin\nPassword: passcode", 
            "title": "PEGR Install"
        }, 
        {
            "location": "/grails/", 
            "text": "Grails\n\n\nGrails Tutorial\n\n\n\u2022   Tutorial link reference: http://grails.asia/\n\u2022   For an installation, see pegr tutorial page\n\n\n\n\n$ git clone\n\n\n\n\n\u2022   Now Download the MySQL file located at: https://psu.app.box.com/file/175943271869\n\n\n\u2022   Rename the sql file to pegrDB\n\u2022   Go to System Preferences and you will find a MySql Icon. Click on that and start the SQL server.\n\u2022   If you have installed MySQL using homebrew, you can start the MySQL server using below command:\n\n\n\n\n$ mysql.server start\n # start the mysql server", 
            "title": "Grails"
        }, 
        {
            "location": "/grails/#grails", 
            "text": "", 
            "title": "Grails"
        }, 
        {
            "location": "/grails/#grails-tutorial", 
            "text": "\u2022   Tutorial link reference: http://grails.asia/\n\u2022   For an installation, see pegr tutorial page   $ git clone   \u2022   Now Download the MySQL file located at: https://psu.app.box.com/file/175943271869  \u2022   Rename the sql file to pegrDB\n\u2022   Go to System Preferences and you will find a MySql Icon. Click on that and start the SQL server.\n\u2022   If you have installed MySQL using homebrew, you can start the MySQL server using below command:   $ mysql.server start  # start the mysql server", 
            "title": "Grails Tutorial"
        }, 
        {
            "location": "/debug/", 
            "text": "Debug\n\n\nThis guide outlines some of the common warning messages and errors during the planemo installation \n testing procedures.\n\n\nCommon Warnings\n\n\nExample:\n\n\n.. WARNING: No tests found, most tools should define test cases.\n.. WARNING: No valid test(s) found.\n\n\n\nThis indicates that there are no test cases written in the wrapper(.xml file).\nIncluding any test, for an example:\n\n\nCommon Errors\n\n\n\n\ndbkey error: https://github.com/galaxyproject/planemo/issues/746\n\n\nCannot locate xUnit report: https://github.com/galaxyproject/planemo/issues/724\n\n\nplanemo couldn't find a target test-data directory: This means that there is no test-data directory created for planemo testing.\n  Fix the issue by simply checking planemo l or create a test-data directory manually and copy all input \n output files.\n\n\n\n\nVersion Conflicts\n\n\nA lot of troubles with the initial setup comes from the version conflict of multiple tools and dependencies. One can find the list of compatible version below:\n\n\npython\nplanemo\ngalaxy", 
            "title": "Debug"
        }, 
        {
            "location": "/debug/#debug", 
            "text": "This guide outlines some of the common warning messages and errors during the planemo installation   testing procedures.", 
            "title": "Debug"
        }, 
        {
            "location": "/debug/#common-warnings", 
            "text": "Example:  .. WARNING: No tests found, most tools should define test cases.\n.. WARNING: No valid test(s) found.  This indicates that there are no test cases written in the wrapper(.xml file).\nIncluding any test, for an example:", 
            "title": "Common Warnings"
        }, 
        {
            "location": "/debug/#common-errors", 
            "text": "dbkey error: https://github.com/galaxyproject/planemo/issues/746  Cannot locate xUnit report: https://github.com/galaxyproject/planemo/issues/724  planemo couldn't find a target test-data directory: This means that there is no test-data directory created for planemo testing.\n  Fix the issue by simply checking planemo l or create a test-data directory manually and copy all input   output files.", 
            "title": "Common Errors"
        }, 
        {
            "location": "/debug/#version-conflicts", 
            "text": "A lot of troubles with the initial setup comes from the version conflict of multiple tools and dependencies. One can find the list of compatible version below:  python\nplanemo\ngalaxy", 
            "title": "Version Conflicts"
        }, 
        {
            "location": "/FAQ/", 
            "text": "FAQ\n\n\nFrequently Asked Questions\n\n\nInstallation\n\n\nCan planemo_init add additional features without generating the whole wrapper using the command line?\n\n\nNo. You must use planemo_init with all the options included, you cannot add additional cases to an already existing wrapper (xml file).\n\n\nTest\n\n\nDoes planemo t not work if you don't include all the input and output test files in the same directory?\n\n\nYes. you must include all the input and output files in order to test. You can also select specific wrappers for testing, such as planemo t your.xml then you only need to include the test files for your.xml wrapper.\n\n\nDebug\n\n\nWhere can I get help with debugging?\n\n\nYou can search for open planemo issues and get help here: https://github.com/galaxyproject/planemo/issues.", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/#faq", 
            "text": "Frequently Asked Questions", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/FAQ/#can-planemo_init-add-additional-features-without-generating-the-whole-wrapper-using-the-command-line", 
            "text": "No. You must use planemo_init with all the options included, you cannot add additional cases to an already existing wrapper (xml file).", 
            "title": "Can planemo_init add additional features without generating the whole wrapper using the command line?"
        }, 
        {
            "location": "/FAQ/#test", 
            "text": "", 
            "title": "Test"
        }, 
        {
            "location": "/FAQ/#does-planemo-t-not-work-if-you-dont-include-all-the-input-and-output-test-files-in-the-same-directory", 
            "text": "Yes. you must include all the input and output files in order to test. You can also select specific wrappers for testing, such as planemo t your.xml then you only need to include the test files for your.xml wrapper.", 
            "title": "Does planemo t not work if you don't include all the input and output test files in the same directory?"
        }, 
        {
            "location": "/FAQ/#debug", 
            "text": "", 
            "title": "Debug"
        }, 
        {
            "location": "/FAQ/#where-can-i-get-help-with-debugging", 
            "text": "You can search for open planemo issues and get help here: https://github.com/galaxyproject/planemo/issues.", 
            "title": "Where can I get help with debugging?"
        }
    ]
}