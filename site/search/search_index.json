{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Introduction This tutorial is updated as of June 20, 2018 by Hedgie Jo. Originally written by Prashant Kuntala in 8th March, 2018. This page was made using mkdocs, for more information visit mkdocs.org . Quick Commands List of main commands and their purpose. Galaxy sh run.sh - run the local galaxy instance grails - install dependencies Planemo planemo tool_init --id 'wrap' --name 'Tool Wrapper' - generate xml file planemo l - wrapper syntax check for the galaxy coding standard planemo t - test tool functionality planemo s - serve planemo on local host PEGR mysql.server start - start the sql server, in this case the local pegr instance grails run-app - start the grails app mysql Create database pegr; # create pegr database mysql use pegr; # set pegr as the database mysql source pegrDB.sql # use the sql server mysql show tables; # view tables Grails grails - install local dependencies grails run-app - start the grails app Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. galaxy.md # Galaxy tutorial planemo.md # Planemo tutorial pegr.md # PEGR tutorial grails.md # Grails Groovy tutorial debug.md # Debugging help faq.md # Frequently Asked Questions Navigation Here are some tips on how to navigate through the site. - Navigation Bar: select any pages you want to view - Search: search any keyword on the site - Previous: Go back to the previous page - Next: Move forward to the next page","title":"Welcome"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#introduction","text":"This tutorial is updated as of June 20, 2018 by Hedgie Jo. Originally written by Prashant Kuntala in 8th March, 2018. This page was made using mkdocs, for more information visit mkdocs.org .","title":"Introduction"},{"location":"#quick-commands","text":"List of main commands and their purpose. Galaxy sh run.sh - run the local galaxy instance grails - install dependencies Planemo planemo tool_init --id 'wrap' --name 'Tool Wrapper' - generate xml file planemo l - wrapper syntax check for the galaxy coding standard planemo t - test tool functionality planemo s - serve planemo on local host PEGR mysql.server start - start the sql server, in this case the local pegr instance grails run-app - start the grails app mysql Create database pegr; # create pegr database mysql use pegr; # set pegr as the database mysql source pegrDB.sql # use the sql server mysql show tables; # view tables Grails grails - install local dependencies grails run-app - start the grails app","title":"Quick Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. galaxy.md # Galaxy tutorial planemo.md # Planemo tutorial pegr.md # PEGR tutorial grails.md # Grails Groovy tutorial debug.md # Debugging help faq.md # Frequently Asked Questions","title":"Project layout"},{"location":"#navigation","text":"Here are some tips on how to navigate through the site. - Navigation Bar: select any pages you want to view - Search: search any keyword on the site - Previous: Go back to the previous page - Next: Move forward to the next page","title":"Navigation"},{"location":"FAQ/","text":"FAQ Frequently Asked Questions Installation Can planemo_init add additional features without generating the whole wrapper using the command line? No. You must use planemo_init with all the options included, you cannot add additional cases to an already existing wrapper (xml file). Test Does planemo t not work if you don't include all the input and output test files in the same directory? Yes. you must include all the input and output files in order to test. You can also select specific wrappers for testing, such as planemo t your.xml then you only need to include the test files for your.xml wrapper. Debug Where can I get help with debugging? You can search for open planemo issues and get help here: https://github.com/galaxyproject/planemo/issues. It says 'internet not reachable' when I am connected to the internet. What can I do? You need to set the curl connect timeout and curl max time in the config file which is allocated in the following path: $ cd ~ $ cd .sdkman/etc $ ls Open the config file and change the following: sdkman_curl_connect_timeout=20 sdkman_curl_max_time=0 It might be that the internet service provider is blocking the connection. You can resolve this by either using a different internet or by using a VPN. See the link for more details on this bug.","title":"FAQ"},{"location":"FAQ/#faq","text":"Frequently Asked Questions","title":"FAQ"},{"location":"FAQ/#installation","text":"","title":"Installation"},{"location":"FAQ/#can-planemo_init-add-additional-features-without-generating-the-whole-wrapper-using-the-command-line","text":"No. You must use planemo_init with all the options included, you cannot add additional cases to an already existing wrapper (xml file).","title":"Can planemo_init add additional features without generating the whole wrapper using the command line?"},{"location":"FAQ/#test","text":"","title":"Test"},{"location":"FAQ/#does-planemo-t-not-work-if-you-dont-include-all-the-input-and-output-test-files-in-the-same-directory","text":"Yes. you must include all the input and output files in order to test. You can also select specific wrappers for testing, such as planemo t your.xml then you only need to include the test files for your.xml wrapper.","title":"Does planemo t not work if you don't include all the input and output test files in the same directory?"},{"location":"FAQ/#debug","text":"","title":"Debug"},{"location":"FAQ/#where-can-i-get-help-with-debugging","text":"You can search for open planemo issues and get help here: https://github.com/galaxyproject/planemo/issues.","title":"Where can I get help with debugging?"},{"location":"FAQ/#it-says-internet-not-reachable-when-i-am-connected-to-the-internet-what-can-i-do","text":"You need to set the curl connect timeout and curl max time in the config file which is allocated in the following path: $ cd ~ $ cd .sdkman/etc $ ls Open the config file and change the following: sdkman_curl_connect_timeout=20 sdkman_curl_max_time=0 It might be that the internet service provider is blocking the connection. You can resolve this by either using a different internet or by using a VPN. See the link for more details on this bug.","title":"It says 'internet not reachable' when I am connected to the internet. What can I do?"},{"location":"debug/","text":"Debug This guide outlines some of the common warning messages and errors during the planemo installation testing procedures. Common Warnings Example: .. WARNING: No tests found, most tools should define test cases. .. WARNING: No valid test(s) found. This indicates that there are no test cases written in the wrapper(.xml file). Common Errors dbkey error: https://github.com/galaxyproject/planemo/issues/746 Cannot locate xUnit report: https://github.com/galaxyproject/planemo/issues/724 planemo couldn't find a target test-data directory: This means that there is no test-data directory created for planemo testing. Fix the issue by simply checking planemo l or create a test-data directory manually and copy all input output files. Version Conflicts A lot of troubles with the initial setup comes from the version conflict of multiple tools and dependencies. One can find the list of compatible versions below: Python 3.6.5 Planemo 0.53.0 Galaxy","title":"Debug"},{"location":"debug/#debug","text":"This guide outlines some of the common warning messages and errors during the planemo installation testing procedures.","title":"Debug"},{"location":"debug/#common-warnings","text":"Example: .. WARNING: No tests found, most tools should define test cases. .. WARNING: No valid test(s) found. This indicates that there are no test cases written in the wrapper(.xml file).","title":"Common Warnings"},{"location":"debug/#common-errors","text":"dbkey error: https://github.com/galaxyproject/planemo/issues/746 Cannot locate xUnit report: https://github.com/galaxyproject/planemo/issues/724 planemo couldn't find a target test-data directory: This means that there is no test-data directory created for planemo testing. Fix the issue by simply checking planemo l or create a test-data directory manually and copy all input output files.","title":"Common Errors"},{"location":"debug/#version-conflicts","text":"A lot of troubles with the initial setup comes from the version conflict of multiple tools and dependencies. One can find the list of compatible versions below: Python 3.6.5 Planemo 0.53.0 Galaxy","title":"Version Conflicts"},{"location":"galaxy/","text":"Galaxy Pre-Install Install samtools (locally) on your machine if it is not already installed. $ brew install samtools # (mac) http://samtools.sourceforge.net/-Install # (other) Install yarn on your machine, if not already installed. $ brew install yarn # (mac) https://yarnpkg.com/en/docs/install # (other) Install Go to the tutorial link: galaxyproject.org/admin/#get-galaxy Clone the galaxy somewhere lower in the directory structure to avoid conda issues and problems. BEST CHOICE: clone it to your ~/Desktop $ git clone -b release_17.09 https://github.com/galaxyproject/galaxy.git $ git branch \u2013a # optional $ git checkout master # optional Go into the directory \u201cgalaxy\u201d sh run.sh # run galaxy server Couple of dependencies are installed and you should see the galaxy running at localhost:8080 Basic starting point tutorials: galaxyproject.org/#learn github.com/galaxyproject/#dagobah-training Install sacCer3_cegr Genome build Run the galaxy on http://127.0.0.1:8080. Register by click on User - register Use the following credentials Username: cegr@psu.edu # username should be same to make the api calls work Password: your_password # create a password of your choice Create a copy of \u201cgalaxy.ini.sample\u201d in Config folder and rename it to \u201cgalaxy.ini\u201d. Open the galaxy.ini file and search for \u201cadmin_users\u201d and add the username to have admin access. Install the below tools from your admin toolshed. (usually install those with the \u201cOwner\u201d being \u201ciuc\u201d or \u201cdevteam\u201d). data_manager_bwa_mem_index_builderodata_manager_fetch_genome_dbkeys_all_fastaodata_manager_sam_fasta_index_builderodata_manager_twobit_builder Upload the \u201csacCer3_cegr. fa\u201d fasta file into the galaxy using the \u201cupload button\u201d on the left pane top right corner. (available in the data folder, provided along with this documentation). Once you have uploaded, you should see the file appear in the \u201chistory pane\u201d on your right. Go to Admin portal. Under the \u201cdata\u201d section. Click on localdata. - You need to run the following \u201cdata managers tools\u201d that we just installed in the exact order as below: CreateDBkey and reference geneomeoTwoBitoBWA-MEM SAM Fasta Below is a screenshot for each of the steps, in the same order of execution. Once you click on the \u201cCreate DBkey and Reference Genome\u201d, fill out the information as below and click \u201cExecute\u201d. You can specify sequence name to be \u201cSacCer3_cegr\u201d and leave everything as default in all the tools. Once you have run all the tools, you need to check couple of things populate in the internal databases of galaxy. Go to Admin - View Tool Data Table Entries - dbkeys Similarly check \u201call_fasta\u201d,\u201dtwobit\u201d,\u201dbwa_mem_indexes\u201d (all the ones that are bold in the below image, should contain an entry for sacCer3_cegr) Install the Galaxy / ChIP-exo Workflow Go to https://chipexo-gw.aci.ics.psu.edu/, Log in with the correct credentials Username: username Password: password - You should see the below page. Install RepeatMasker on mac (optional) This is not required for YEPQC pipeline) Go to the website http://www.repeatmasker.org/RMDownload.html You need to install the prerequisites first. Pre-Install Install RMBlast (sequence Search engine): RMBlast You can just download all the binaries from these two locations based on your machine (mac, linux) ftp://ftp.ncbi.nlm.nih.gov/blast/executables/rmblast/2.2.28/ ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.2.28/ extract them and copy all the binaries into \u201c/usr/local/bin/\u201d so that all users can use them. Check whether you have \u201crmblastn\u201c binary in /usr/local/bin/. If you don\u2019t then follow the steps in the RMBLAST installation website above. Install TFR: download Now follow the rest of the instructions on http://www.repeatmasker.org/RMDownload.html Under the Installation section: Download the RepeatMasker.tar.gz Uncompress and copy it to /usr/local/ cd /usr/local/RepeatMasker and sudo perl ./configure It prompts for various paths for the executables which we just installed. Specify the paths in correctly and add the path to RepeatMasker to your $PATH Add the cegr galaxy output statistics for the core pipeline. Reference to add new tools into galaxy. Download the tools from seqcode and copy the cegr_statistics folder into your \u201ctools\u201d folder in galaxy. Please remember that below lines make your galaxy run on port 8090 and local pegr run on port 8080. Configure the port for galaxy in \u201cgalaxy.ini\u201d file. You need to generate an apikey in your local galaxy so that it can communicate with the local PEGR. On \u201cAdmin/UserManagement\u201d click on \u201cAPI keys\u201d. Click on \u201cGenerate a new key now\u201d. Use that key in the below steps. (don't generate keys for the same user twice, it can lead to errors.) create a copy of \u201cstats_config.ini.sample\u201d and rename it to \u201ccegr_config.ini.sample\u201d add the below lines into the file. Now you need to make galaxy know how to use these tools. Go to your \u201cconfig\u201d folder and make a copy of \u201ctools_conf.xml.main\u201d and rename it to \u201ctools_conf.xml\u201d Add below lines at the end of the file within the Save and restart galaxy. You can edit the pipeline to remove \u201cRepeat masker\u201d in the paired_002\u201d workflow. Below images show removal of \u201cRepeat masker\u201d and rearranging the workflow. Add workflow id into your Local PEGR DB Each workflow in galaxy has a unique id that is assigned internally. We use bioblend framework (python) to access galaxy and retrieve your workflow id. Documentation . You can use the \u201cgetWorkflowid.py\u201d python script to get the workflow id. Make sure you replace your galaxy instance url and apikey from your local instance.(script is available in the data folder, provided along with this documentation). Make sure that your galaxy is running before you use the script. Successful output: CONGRATULATIONS, YOU HAVE SUCCESSFULLY SET UP THE LOCAL GALAXY!","title":"Galaxy"},{"location":"galaxy/#galaxy","text":"","title":"Galaxy"},{"location":"galaxy/#pre-install","text":"Install samtools (locally) on your machine if it is not already installed. $ brew install samtools # (mac) http://samtools.sourceforge.net/-Install # (other) Install yarn on your machine, if not already installed. $ brew install yarn # (mac) https://yarnpkg.com/en/docs/install # (other)","title":"Pre-Install"},{"location":"galaxy/#install","text":"Go to the tutorial link: galaxyproject.org/admin/#get-galaxy Clone the galaxy somewhere lower in the directory structure to avoid conda issues and problems. BEST CHOICE: clone it to your ~/Desktop $ git clone -b release_17.09 https://github.com/galaxyproject/galaxy.git $ git branch \u2013a # optional $ git checkout master # optional Go into the directory \u201cgalaxy\u201d sh run.sh # run galaxy server Couple of dependencies are installed and you should see the galaxy running at localhost:8080 Basic starting point tutorials: galaxyproject.org/#learn github.com/galaxyproject/#dagobah-training","title":"Install"},{"location":"galaxy/#install-saccer3_cegr-genome-build","text":"Run the galaxy on http://127.0.0.1:8080. Register by click on User - register Use the following credentials Username: cegr@psu.edu # username should be same to make the api calls work Password: your_password # create a password of your choice Create a copy of \u201cgalaxy.ini.sample\u201d in Config folder and rename it to \u201cgalaxy.ini\u201d. Open the galaxy.ini file and search for \u201cadmin_users\u201d and add the username to have admin access. Install the below tools from your admin toolshed. (usually install those with the \u201cOwner\u201d being \u201ciuc\u201d or \u201cdevteam\u201d). data_manager_bwa_mem_index_builderodata_manager_fetch_genome_dbkeys_all_fastaodata_manager_sam_fasta_index_builderodata_manager_twobit_builder Upload the \u201csacCer3_cegr. fa\u201d fasta file into the galaxy using the \u201cupload button\u201d on the left pane top right corner. (available in the data folder, provided along with this documentation). Once you have uploaded, you should see the file appear in the \u201chistory pane\u201d on your right. Go to Admin portal. Under the \u201cdata\u201d section. Click on localdata. - You need to run the following \u201cdata managers tools\u201d that we just installed in the exact order as below: CreateDBkey and reference geneomeoTwoBitoBWA-MEM SAM Fasta Below is a screenshot for each of the steps, in the same order of execution. Once you click on the \u201cCreate DBkey and Reference Genome\u201d, fill out the information as below and click \u201cExecute\u201d. You can specify sequence name to be \u201cSacCer3_cegr\u201d and leave everything as default in all the tools. Once you have run all the tools, you need to check couple of things populate in the internal databases of galaxy. Go to Admin - View Tool Data Table Entries - dbkeys Similarly check \u201call_fasta\u201d,\u201dtwobit\u201d,\u201dbwa_mem_indexes\u201d (all the ones that are bold in the below image, should contain an entry for sacCer3_cegr)","title":"Install sacCer3_cegr Genome build"},{"location":"galaxy/#install-the-galaxy-chip-exo-workflow","text":"Go to https://chipexo-gw.aci.ics.psu.edu/, Log in with the correct credentials Username: username Password: password - You should see the below page.","title":"Install the Galaxy / ChIP-exo Workflow"},{"location":"galaxy/#install-repeatmasker-on-mac-optional","text":"This is not required for YEPQC pipeline) Go to the website http://www.repeatmasker.org/RMDownload.html You need to install the prerequisites first.","title":"Install RepeatMasker on mac (optional)"},{"location":"galaxy/#pre-install_1","text":"Install RMBlast (sequence Search engine): RMBlast You can just download all the binaries from these two locations based on your machine (mac, linux) ftp://ftp.ncbi.nlm.nih.gov/blast/executables/rmblast/2.2.28/ ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.2.28/ extract them and copy all the binaries into \u201c/usr/local/bin/\u201d so that all users can use them. Check whether you have \u201crmblastn\u201c binary in /usr/local/bin/. If you don\u2019t then follow the steps in the RMBLAST installation website above. Install TFR: download Now follow the rest of the instructions on http://www.repeatmasker.org/RMDownload.html Under the Installation section: Download the RepeatMasker.tar.gz Uncompress and copy it to /usr/local/ cd /usr/local/RepeatMasker and sudo perl ./configure It prompts for various paths for the executables which we just installed. Specify the paths in correctly and add the path to RepeatMasker to your $PATH","title":"Pre-Install"},{"location":"galaxy/#add-the-cegr-galaxy-output-statistics-for-the-core-pipeline","text":"Reference to add new tools into galaxy. Download the tools from seqcode and copy the cegr_statistics folder into your \u201ctools\u201d folder in galaxy. Please remember that below lines make your galaxy run on port 8090 and local pegr run on port 8080. Configure the port for galaxy in \u201cgalaxy.ini\u201d file. You need to generate an apikey in your local galaxy so that it can communicate with the local PEGR. On \u201cAdmin/UserManagement\u201d click on \u201cAPI keys\u201d. Click on \u201cGenerate a new key now\u201d. Use that key in the below steps. (don't generate keys for the same user twice, it can lead to errors.) create a copy of \u201cstats_config.ini.sample\u201d and rename it to \u201ccegr_config.ini.sample\u201d add the below lines into the file. Now you need to make galaxy know how to use these tools. Go to your \u201cconfig\u201d folder and make a copy of \u201ctools_conf.xml.main\u201d and rename it to \u201ctools_conf.xml\u201d Add below lines at the end of the file within the Save and restart galaxy. You can edit the pipeline to remove \u201cRepeat masker\u201d in the paired_002\u201d workflow. Below images show removal of \u201cRepeat masker\u201d and rearranging the workflow.","title":"Add the cegr galaxy output statistics for the core pipeline."},{"location":"galaxy/#add-workflow-id-into-your-local-pegr-db","text":"Each workflow in galaxy has a unique id that is assigned internally. We use bioblend framework (python) to access galaxy and retrieve your workflow id. Documentation . You can use the \u201cgetWorkflowid.py\u201d python script to get the workflow id. Make sure you replace your galaxy instance url and apikey from your local instance.(script is available in the data folder, provided along with this documentation). Make sure that your galaxy is running before you use the script. Successful output: CONGRATULATIONS, YOU HAVE SUCCESSFULLY SET UP THE LOCAL GALAXY!","title":"Add workflow id into your Local PEGR DB"},{"location":"grails/","text":"Grails Grails Tutorial \u2022 Tutorial link reference: http://grails.asia/ Introduction What is Grails? Grails is an open source web application framework that uses the Apache Groovy programming language (based on Java). It is intended to be a high-productivity framework by following the \"coding by convention\" paradigm, providing a stand-alone development environment and hiding much of the configuration detail from the developer. Benefits Convention over configuration ushers in abundant productivity for the developers. Grails enables you to write DRY code. If you have any existing Java code, reusing it in Grails should be no problem. Developers don\u2019t need to write all the plumbing/boilerplate code with Grails. Here, developers have a big relief as they can concentrate more on turning your ideas into applications instead of chasing after configuring the framework components. As it is free of XML configuration, the Groovy on Grails can help you to develop the application in real time. Grails supports scaffolding. This helps developers to create applications with CRUD functionalities- Create, Read, Update and delete. Simple and easy to maintain code. Migration Grails 3.0 is a complete ground up rewrite of Grails and introduces new concepts and components for many parts of the framework. When upgrading an application or plugin from Grails 3.0 there are many areas to consider including: For step-by-step migration guide click [here] The migration of Grails app version 2 to 3 can be done with helpful links . To summarize the video, there are three main changes: Different file directories Merged files Deleted files There are also more changes as follows: Removal of dynamic scaffolding from Grails 3.0.0 till 3.0.4 when it was re-introduced Removal of before and after interceptors Project structure differences File location differences Configuration differences Package name differences Legacy Gant Scripts Gradle Build System Changes to Plugins Source vs Binary Plugins The biggest suggestion from the video is installing a fresh, new grails 3 app and migrating from the original grails 2 app instead of trying to make the changes in the original app. This will create a clean migration platform. After the migration, you must test intensively to catch any unexpected errors. PEGR Upgrade Notes (Grails 2.5.5 - 3.3.5) Written by Pierce Chaffin Last Updated 06/27/18 This is not all inclusive of bugs you will encounter however I am working to add those as soon as I can Notes: Initial Migration of Files First Step is to create a new grails project in grails 3.3.5 in a new directory.sdf Next is to migrate all relevant files to their new homes in the new file hierarchy in grails 3.x Start with the source files $ cp -rf ../old_app/src/groovy/* src/main/groovy $ cp -rf ../old_app/src/java/* src/main/groovy $ cp -rf ../old_app/grails-app/* grails-app Then migrate all test files $ cp -rf ../old_app/test/unit/* src/main/groovy $ cp -rf ../old_app/src/java/* src/main/groovy $ cp -rf ../old_app/grails-app/* grails-app Now that was it for the easy segments \u2026 onto all the configuration files and reorganization For starters lets migrate all dependencies from BuildConfig.groovy to the new build.gradle file (Mind you all of these plugins have new names and access locations as codehaus and other packages no longer exist) Ex: As the lib directory no longer is directly supported do this \u2026 compile fileTree(dir:'lib', include:'.jar') Additionally, going back to codehaus org.codehaus.groovy.grails. has been migrated to grails.code.GrailsApplication.* At this point in terminal we are going to want to resolve controller dependencies as well as some domain dependencies Do this by running $ grails compile Do this quite a few times, looking at the stack trace and resolving as you go First issue you will probably encounter is that of @grails.validation.Validateable This is no longer in Grails 3 and needs to be changed to a class implementation class XXXX implements grails.validation.Validateable() A few other notes with regards to syntax \u2026 a few packages in grails have changed simply in terminology .. i.e. j_username is now simply username in Spring Security Core (auth.gsp) Once you compile successfully you can try to run-app but almost assuredly will find that this doesn\u2019t work Next comes the configuration files \u2026 Start by moving URLMappings.groovy to the controllers directory And then change Config.groovy to application.groovy And then it is up to you (I went with the YAML file) as to where you want to merge in your DataSource.groovy (Either into application.yml or application.groovy Delete log4j from the application.groovy file Migrate the URLInterceptMapping to the new formatting and change it to a static rules mapping Run $ grails s2-quickstart User Role Past this, a lot of functionality might still not work as some dependencies are still not lining up properly At this point the concept of the security in Grails being different in defaults is the largest obstacle. In grails 3.x, by default all pages are inaccessible unless explicitly notated in the static rules of the application security for specific rules. Thus, as shown below make a mapping for every page with rules with regards to User Roles. [pattern:'/report/togglePreferredAlignment/**', access:['ROLE_ADMIN']], =======","title":"Grails"},{"location":"grails/#grails","text":"","title":"Grails"},{"location":"grails/#grails-tutorial","text":"\u2022 Tutorial link reference: http://grails.asia/","title":"Grails Tutorial"},{"location":"grails/#introduction","text":"What is Grails? Grails is an open source web application framework that uses the Apache Groovy programming language (based on Java). It is intended to be a high-productivity framework by following the \"coding by convention\" paradigm, providing a stand-alone development environment and hiding much of the configuration detail from the developer.","title":"Introduction"},{"location":"grails/#benefits","text":"Convention over configuration ushers in abundant productivity for the developers. Grails enables you to write DRY code. If you have any existing Java code, reusing it in Grails should be no problem. Developers don\u2019t need to write all the plumbing/boilerplate code with Grails. Here, developers have a big relief as they can concentrate more on turning your ideas into applications instead of chasing after configuring the framework components. As it is free of XML configuration, the Groovy on Grails can help you to develop the application in real time. Grails supports scaffolding. This helps developers to create applications with CRUD functionalities- Create, Read, Update and delete. Simple and easy to maintain code.","title":"Benefits"},{"location":"grails/#migration","text":"Grails 3.0 is a complete ground up rewrite of Grails and introduces new concepts and components for many parts of the framework. When upgrading an application or plugin from Grails 3.0 there are many areas to consider including: For step-by-step migration guide click [here] The migration of Grails app version 2 to 3 can be done with helpful links . To summarize the video, there are three main changes: Different file directories Merged files Deleted files There are also more changes as follows: Removal of dynamic scaffolding from Grails 3.0.0 till 3.0.4 when it was re-introduced Removal of before and after interceptors Project structure differences File location differences Configuration differences Package name differences Legacy Gant Scripts Gradle Build System Changes to Plugins Source vs Binary Plugins The biggest suggestion from the video is installing a fresh, new grails 3 app and migrating from the original grails 2 app instead of trying to make the changes in the original app. This will create a clean migration platform. After the migration, you must test intensively to catch any unexpected errors.","title":"Migration"},{"location":"grails/#pegr-upgrade-notes-grails-255-335","text":"Written by Pierce Chaffin Last Updated 06/27/18 This is not all inclusive of bugs you will encounter however I am working to add those as soon as I can Notes:","title":"PEGR Upgrade Notes (Grails 2.5.5 -&gt; 3.3.5)"},{"location":"grails/#initial-migration-of-files","text":"First Step is to create a new grails project in grails 3.3.5 in a new directory.sdf Next is to migrate all relevant files to their new homes in the new file hierarchy in grails 3.x","title":"Initial Migration of Files"},{"location":"grails/#start-with-the-source-files","text":"$ cp -rf ../old_app/src/groovy/* src/main/groovy $ cp -rf ../old_app/src/java/* src/main/groovy $ cp -rf ../old_app/grails-app/* grails-app","title":"Start with the source files"},{"location":"grails/#then-migrate-all-test-files","text":"$ cp -rf ../old_app/test/unit/* src/main/groovy $ cp -rf ../old_app/src/java/* src/main/groovy $ cp -rf ../old_app/grails-app/* grails-app Now that was it for the easy segments \u2026 onto all the configuration files and reorganization For starters lets migrate all dependencies from BuildConfig.groovy to the new build.gradle file (Mind you all of these plugins have new names and access locations as codehaus and other packages no longer exist) Ex: As the lib directory no longer is directly supported do this \u2026 compile fileTree(dir:'lib', include:'.jar')","title":"Then migrate all test files"},{"location":"grails/#additionally-going-back-to-codehaus","text":"","title":"Additionally, going back to codehaus"},{"location":"grails/#orgcodehausgroovygrails-has-been-migrated-to-grailscodegrailsapplication","text":"At this point in terminal we are going to want to resolve controller dependencies as well as some domain dependencies","title":"org.codehaus.groovy.grails. has been migrated to grails.code.GrailsApplication.*"},{"location":"grails/#do-this-by-running","text":"$ grails compile Do this quite a few times, looking at the stack trace and resolving as you go First issue you will probably encounter is that of @grails.validation.Validateable This is no longer in Grails 3 and needs to be changed to a class implementation class XXXX implements grails.validation.Validateable()","title":"Do this by running"},{"location":"grails/#a-few-other-notes-with-regards-to-syntax-a-few-packages-in-grails-have-changed-simply-in-terminology-ie-j_username-is-now-simply-username-in-spring-security-core-authgsp","text":"Once you compile successfully you can try to run-app but almost assuredly will find that this doesn\u2019t work Next comes the configuration files \u2026 Start by moving URLMappings.groovy to the controllers directory And then change Config.groovy to application.groovy And then it is up to you (I went with the YAML file) as to where you want to merge in your DataSource.groovy (Either into application.yml or application.groovy Delete log4j from the application.groovy file Migrate the URLInterceptMapping to the new formatting and change it to a static rules mapping","title":"A few other notes with regards to syntax \u2026 a few packages in grails have changed simply in terminology .. i.e. j_username is now simply username in Spring Security Core (auth.gsp)"},{"location":"grails/#run","text":"$ grails s2-quickstart User Role","title":"Run"},{"location":"grails/#past-this-a-lot-of-functionality-might-still-not-work-as-some-dependencies-are-still-not-lining-up-properly","text":"At this point the concept of the security in Grails being different in defaults is the largest obstacle. In grails 3.x, by default all pages are inaccessible unless explicitly notated in the static rules of the application security for specific rules. Thus, as shown below make a mapping for every page with rules with regards to User Roles. [pattern:'/report/togglePreferredAlignment/**', access:['ROLE_ADMIN']], =======","title":"Past this, a lot of functionality might still not work as some dependencies are still not lining up properly"},{"location":"pegr/","text":"PEGR Pre-Install Install curl (For Windows, use Git Bash) Install sdkman ( tutorial ): $ curl -s \"https://get.sdkman.io\" | bash $ source \"$HOME/.sdkman/bin/sdkman-init.sh\" $ sdk version # check your sdkman version Install Grails: $ sdk install grails 2.5.5 $ sdk list grails # check your installation of grails $ sdk use grails 2.5.5 # change your default grails to version 2.5.4 Now close the terminal and quit the terminal in your dashboard. [Important!] Install Groovy: $ sdk install groovy 2.4.4 $ sdk list groovy # check your current version of groovy Install Java: $ sdk install java 7u141-zulu # install Java (specific version needed for current PEGR) $ sdk install java 8u141-zulu # alternate version that is also compatible $ sdk list java # Check your current version of java Install MAMP: * https://www.mamp.info/en/downloads/ # download link Now Close your terminal and quit the terminal on the dashboard.[Need to do above step, if you want to run pegr locally ;)] $ grails # check if grails has been successfully installed Press ctrl+C to exit the prompt. PEGR Install \u2022 Go to any directory of your choice and clone the PEGR git repo. $ git clone https://github.com/seqcode/pegr.git # clone \"pegr\" in your directory \u2022 Navigate to pegr/pegr/grails-app/conf/BuildConfig.groovy and edit these lines grails.project.target.level = 1.6 - grails.project.target.level = 1.7 grails.project.source.level = 1.6 - grails.project.source.level = 1.7 Download the MySQL file and rename it to pegrDB.sql Go to System Preferences and find MySql icon, then click to start the SQL server. $ mysql.server start -(mac) if you have installed using homebrew Open the terminal and navigate to the same directory as the pegrDB.sql file $ mysql -u root -p # Connect to your server This will prompt you for that password it gave you. [ if you installed MySQL using the .dmg file] otherwise, in the case of homebrew, there is no password set for root. You should be able to see the prompt mysql After successfully connected to the MySQL, set the password for root $ mysql ALTER USER 'root'@'localhost' IDENTIFIED BY ' your new password '; \u2022 Create and switch to the new database: mysql Create database pegr; mysql use pegr; mysql source pegrDB.sql mysql show tables; \u2022 Successful output here Create a new user to access your \u201cpegr\u201d database mysql create user 'username'@'localhost' identified by 'password'; mysql grant all privileges on *.* to 'username'@'localhost'; For an example, mysql create user hyc5135@localhost identified by 'mypassword'; mysql grant all privileges on *.* to hyc5135@localhost; Modify an existing account to gain a login credentials (need a valid non-WebAccess account) Within your pegrDB, locate the user \"labadmin\" and replace the password value: $ mysql UPDATE user set password=\"password\" where username=\"labadmin\"; Open the BuildConfig.groovy file at pegr/grails-app/conf/BuildConfig.groovy and check the plugins block and verify that the build for the tomcat is appropriate to your version and add the below lines within the plugin block compile \":spring-security-core:2.0.0\" compile \"org.grails.plugins:quartz:1.0.1\" compile \"org.grails.plugins:mail:1.0.7\" Also, within the dependencies block, uncomment runtime 'mysql' [if it is commented] Now open DataSource.groovy at the pegr/grails-app/conf/DataSource.groovy and edit the datasource block to look like this: environments { development { dataSource { dbCreate = \"update\" // one of 'create', 'create-drop', 'update', 'validate', '' url = \"database_url\" username=\" your_username\" password=\"your_password\" } } } Now go into the pegr folder and run pegr $ grails run-app This will successfully start and provide with you an url (http://localhost:8081/pegr) that usually directs you to the login screen of PEGR. Login using the following labadmin credentials: Username: labadmin Password: passcode CONGRATULATIONS, YOU HAVE SUCCESSFULLY SET UP THE LOCAL PEGR!","title":"PEGR"},{"location":"pegr/#pegr","text":"","title":"PEGR"},{"location":"pegr/#pre-install","text":"Install curl (For Windows, use Git Bash) Install sdkman ( tutorial ): $ curl -s \"https://get.sdkman.io\" | bash $ source \"$HOME/.sdkman/bin/sdkman-init.sh\" $ sdk version # check your sdkman version Install Grails: $ sdk install grails 2.5.5 $ sdk list grails # check your installation of grails $ sdk use grails 2.5.5 # change your default grails to version 2.5.4 Now close the terminal and quit the terminal in your dashboard. [Important!] Install Groovy: $ sdk install groovy 2.4.4 $ sdk list groovy # check your current version of groovy Install Java: $ sdk install java 7u141-zulu # install Java (specific version needed for current PEGR) $ sdk install java 8u141-zulu # alternate version that is also compatible $ sdk list java # Check your current version of java Install MAMP: * https://www.mamp.info/en/downloads/ # download link Now Close your terminal and quit the terminal on the dashboard.[Need to do above step, if you want to run pegr locally ;)] $ grails # check if grails has been successfully installed Press ctrl+C to exit the prompt.","title":"Pre-Install"},{"location":"pegr/#pegr-install","text":"\u2022 Go to any directory of your choice and clone the PEGR git repo. $ git clone https://github.com/seqcode/pegr.git # clone \"pegr\" in your directory \u2022 Navigate to pegr/pegr/grails-app/conf/BuildConfig.groovy and edit these lines grails.project.target.level = 1.6 - grails.project.target.level = 1.7 grails.project.source.level = 1.6 - grails.project.source.level = 1.7 Download the MySQL file and rename it to pegrDB.sql Go to System Preferences and find MySql icon, then click to start the SQL server. $ mysql.server start -(mac) if you have installed using homebrew Open the terminal and navigate to the same directory as the pegrDB.sql file $ mysql -u root -p # Connect to your server This will prompt you for that password it gave you. [ if you installed MySQL using the .dmg file] otherwise, in the case of homebrew, there is no password set for root. You should be able to see the prompt mysql After successfully connected to the MySQL, set the password for root $ mysql ALTER USER 'root'@'localhost' IDENTIFIED BY ' your new password '; \u2022 Create and switch to the new database: mysql Create database pegr; mysql use pegr; mysql source pegrDB.sql mysql show tables; \u2022 Successful output here Create a new user to access your \u201cpegr\u201d database mysql create user 'username'@'localhost' identified by 'password'; mysql grant all privileges on *.* to 'username'@'localhost'; For an example, mysql create user hyc5135@localhost identified by 'mypassword'; mysql grant all privileges on *.* to hyc5135@localhost; Modify an existing account to gain a login credentials (need a valid non-WebAccess account) Within your pegrDB, locate the user \"labadmin\" and replace the password value: $ mysql UPDATE user set password=\"password\" where username=\"labadmin\"; Open the BuildConfig.groovy file at pegr/grails-app/conf/BuildConfig.groovy and check the plugins block and verify that the build for the tomcat is appropriate to your version and add the below lines within the plugin block compile \":spring-security-core:2.0.0\" compile \"org.grails.plugins:quartz:1.0.1\" compile \"org.grails.plugins:mail:1.0.7\" Also, within the dependencies block, uncomment runtime 'mysql' [if it is commented] Now open DataSource.groovy at the pegr/grails-app/conf/DataSource.groovy and edit the datasource block to look like this: environments { development { dataSource { dbCreate = \"update\" // one of 'create', 'create-drop', 'update', 'validate', '' url = \"database_url\" username=\" your_username\" password=\"your_password\" } } } Now go into the pegr folder and run pegr $ grails run-app This will successfully start and provide with you an url (http://localhost:8081/pegr) that usually directs you to the login screen of PEGR. Login using the following labadmin credentials: Username: labadmin Password: passcode CONGRATULATIONS, YOU HAVE SUCCESSFULLY SET UP THE LOCAL PEGR!","title":"PEGR Install"},{"location":"planemo/","text":"Planemo Pre-Install Install anaconda (locally) on your machine. Install wget: $ brew install wget - (mac) $ sudo apt-get install wget - (others) Install virtual environment: $ brew install virtualenv - (mac) $ sudo apt-get install virtualenv - (others) NOTE: make sure local galaxy is installed. Couple of dependencies are installed and you should see the galaxy running at localhost:8080 Install pip: $ brew install pip - (mac) $ sudo apt-get install pip - (others) Install Install planemo: $ virtualenv .venv; . .venv/bin/activate $ pip install \u2013-upgrade pip # Upgrade pip if needed. $ pip install planemo Basic tutorial Usage This guide assumes that you have already installed Planemo and have a directory with one or more Galaxy tool with input output files. 1) Init Create galaxy tool wrapper using the init command. $ planemo init CONGRATULATIONS, YOU HAVE SUCCESSFULLY SET UP THE PLANEMO TOOL! Example: $ planemo tool_init --id 'id' \\ --name 'Name of the file' \\ --description 'Description (optional)' \\ --requirement software_version@2.2 \\ --example_command 'input output command' \\ --example_input input_file \\ --example_output output_file \\ --test_case \\ --cite_url 'https://url' \\ --help_from_command 'id' NOTE: Planemo is unable to partially initialize, for example if your xml file is missing \"citation\" section during linting, in order to add it from the command line you need to initialize the entire wrapper. So it's really for creating a new wrapper not modifying an existing one. 2) Lint Planemo can check review tool for XML validity, syntax errors, and compliance with IUC best practices using the lint (l) command. $ planemo lint # same as planemo lint $ planemo lint --help You will also see the test-data directory generated for testing. 3) Test The test command can be used to test the functionality of tool(s). In other words, it checks if the xml file works as supposed to. $ planemo test - test all the xml files in the current directory $ planemo test --galaxy_root=../galaxy wrapper.xml - with optional parameters and specify file(s) to run the test. By default, planemo will search parent directories to see if any is a Galaxy instance. Important note: if you specify --galaxy_root folder, reverting it back might be difficult since the planemo virtual environment path is set up to the galaxy directory. You can try to force planemo to download a disposable instance with the --install_galaxy flag. Ex: $ planemo test --install_galaxy wrapper.xml 4) Serve After passing the test we can open Galaxy with the serve (or with s). $ planemo s ... serving on http://127.0.0.1:8086 Example 1) Seqtk Use conda to install Seqtk: $ conda install --force --yes -c bioconda seqtk=1.2 $ seqtk seq - check if seqtk is installed Download an example FASTQ file $ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq $ seqtk seq -A 2.fastq 2.fasta $ cat 2.fasta If you are unable to download or execute the wget command, simply copy paste the text and save as both 2.fastq and 2.fasta and continue along the steps: EAS54_6_R1_2_1_413_324 CCCTTCTTGTCTTCAGCGTTTCTCC EAS54_6_R1_2_1_540_792 TTGGCAGGCCAAGGCCGATGGATCA EAS54_6_R1_2_1_443_348 GTTGCTTCTGGCGTGGGTGGGGGGG Run the following command to generate seqtk_seq.xml file. These contain minimal requirements for the xml file. $ planemo tool_init --force \\ --id 'seqtk_seq' \\ --name 'Convert to FASTA (seqtk)' \\ --requirement seqtk@1.2 \\ --example_command 'seqtk seq -a 2.fastq 2.fasta' \\ --example_input 2.fastq \\ --example_output 2.fasta \\ --test_case \\ --cite_url 'https://github.com/lh3/seqtk' \\ --help_from_command 'seqtk seq' Explanation of each command options (more here ): id Short identifier for new tool (no whitespace). force Overwrite existing tool if present. name Name for new tool. description Short description for new tool. requirement Name of the package. requirements will be set using Bioconda. example_command Example to command with paths to build Cheetah template from. Must follow with --example_input and --example_output. example_input Replace input file. example_output Replace output file. test_case Generate test-data directory with tool test cases from the supplied example. cite_url Supply a URL for citation. help_from_command Auto populate help from supplied command. Type the following in the same directory where your seqtk.xml is located. $ planemo lint seqtk.xml Tip: Planemo lint command only checks if the syntax is correct, so if you are unable to pass the lint using planemo, check to make sure the above requirements are satisfied. If output says \"Failed linting\" at the end, see the current github issues . Successful output here Functionality test $ planemo t Output: $ planemo t ... All 1 test(s) executed passed. seqtk_seq[0]: passed If error occurs, refer to the error report page on GitHub. 2) getRandomBed Download getRandomBed.py tool: Use the planemo commands to generate the xml file getRandomBed.xml Solution: planemo tool_init --force \\ --id 'getRandomBed' \\ --name 'Random Bed' \\ --requirement python@2.7.14 \\ --example_command '$__tool_directory__/genRandomBed.py $inputBed' \\ --example_input inputBed \\ --example_output randomBed \\ --test_case \\ --cite_url 'http://www.pughlab.psu.edu/' \\ --help_from_command 'getRandomBed' 3) toolExample.pl Consider the following Perl script. #!/usr/bin/perl -w # usage : perl toolExample.pl FASTA file output file open (IN, \" $ARGV[0]\"); open (OUT, \" $ARGV[1]\"); while ( IN ) { chop; if (m/^ /) { s/^ //; if ($. 1) { print OUT sprintf(\"%.3f\", $gc/$length) . \"\\n\"; } $gc = 0; $length = 0; } else { ++$gc while m/[gc]/ig; $length += length $_; } } print OUT sprintf(\"%.3f\", $gc/$length) . \"\\n\"; close( IN ); close( OUT ); #__end__ Create an xml file for the script with an output as follows: tool id=\"gc_content\" name=\"Compute GC content\" description for each sequence in a file /description command perl $__tool_directory__/gc_content.pl $input output.tsv /command inputs param format=\"fasta\" name=\"input\" type=\"data\" label=\"Source file\"/ /inputs outputs data format=\"tabular\" name=\"output\" from_work_dir=\"output.tsv\" / /outputs help This tool computes GC content from a FASTA file. /help /tool Solution: planemo tool_init --force \\ --id 'gc_content' \\ --name 'Compute GC content' \\ --description 'for each sequence in a file' \\ --example_command 'perl $__tool_directory__/gc_content.pl $input output.tsv' \\ --example_input input.fasta \\ --example_output output.tsv \\ --help 'This tool computes GC content from a FASTA file.' Q: Will this pass the planemo lint test? A: No it is missing the following parameters: test_case, requirement, citation, help_from_command","title":"Planemo"},{"location":"planemo/#planemo","text":"","title":"Planemo"},{"location":"planemo/#pre-install","text":"Install anaconda (locally) on your machine. Install wget: $ brew install wget - (mac) $ sudo apt-get install wget - (others) Install virtual environment: $ brew install virtualenv - (mac) $ sudo apt-get install virtualenv - (others) NOTE: make sure local galaxy is installed. Couple of dependencies are installed and you should see the galaxy running at localhost:8080 Install pip: $ brew install pip - (mac) $ sudo apt-get install pip - (others)","title":"Pre-Install"},{"location":"planemo/#install","text":"Install planemo: $ virtualenv .venv; . .venv/bin/activate $ pip install \u2013-upgrade pip # Upgrade pip if needed. $ pip install planemo Basic tutorial","title":"Install"},{"location":"planemo/#usage","text":"This guide assumes that you have already installed Planemo and have a directory with one or more Galaxy tool with input output files.","title":"Usage"},{"location":"planemo/#1-init","text":"Create galaxy tool wrapper using the init command. $ planemo init CONGRATULATIONS, YOU HAVE SUCCESSFULLY SET UP THE PLANEMO TOOL! Example: $ planemo tool_init --id 'id' \\ --name 'Name of the file' \\ --description 'Description (optional)' \\ --requirement software_version@2.2 \\ --example_command 'input output command' \\ --example_input input_file \\ --example_output output_file \\ --test_case \\ --cite_url 'https://url' \\ --help_from_command 'id' NOTE: Planemo is unable to partially initialize, for example if your xml file is missing \"citation\" section during linting, in order to add it from the command line you need to initialize the entire wrapper. So it's really for creating a new wrapper not modifying an existing one.","title":"1) Init"},{"location":"planemo/#2-lint","text":"Planemo can check review tool for XML validity, syntax errors, and compliance with IUC best practices using the lint (l) command. $ planemo lint # same as planemo lint $ planemo lint --help You will also see the test-data directory generated for testing.","title":"2) Lint"},{"location":"planemo/#3-test","text":"The test command can be used to test the functionality of tool(s). In other words, it checks if the xml file works as supposed to. $ planemo test - test all the xml files in the current directory $ planemo test --galaxy_root=../galaxy wrapper.xml - with optional parameters and specify file(s) to run the test. By default, planemo will search parent directories to see if any is a Galaxy instance. Important note: if you specify --galaxy_root folder, reverting it back might be difficult since the planemo virtual environment path is set up to the galaxy directory. You can try to force planemo to download a disposable instance with the --install_galaxy flag. Ex: $ planemo test --install_galaxy wrapper.xml","title":"3) Test"},{"location":"planemo/#4-serve","text":"After passing the test we can open Galaxy with the serve (or with s). $ planemo s ... serving on http://127.0.0.1:8086","title":"4) Serve"},{"location":"planemo/#example","text":"","title":"Example"},{"location":"planemo/#1-seqtk","text":"Use conda to install Seqtk: $ conda install --force --yes -c bioconda seqtk=1.2 $ seqtk seq - check if seqtk is installed Download an example FASTQ file $ wget https://raw.githubusercontent.com/galaxyproject/galaxy-test-data/master/2.fastq $ seqtk seq -A 2.fastq 2.fasta $ cat 2.fasta If you are unable to download or execute the wget command, simply copy paste the text and save as both 2.fastq and 2.fasta and continue along the steps: EAS54_6_R1_2_1_413_324 CCCTTCTTGTCTTCAGCGTTTCTCC EAS54_6_R1_2_1_540_792 TTGGCAGGCCAAGGCCGATGGATCA EAS54_6_R1_2_1_443_348 GTTGCTTCTGGCGTGGGTGGGGGGG Run the following command to generate seqtk_seq.xml file. These contain minimal requirements for the xml file. $ planemo tool_init --force \\ --id 'seqtk_seq' \\ --name 'Convert to FASTA (seqtk)' \\ --requirement seqtk@1.2 \\ --example_command 'seqtk seq -a 2.fastq 2.fasta' \\ --example_input 2.fastq \\ --example_output 2.fasta \\ --test_case \\ --cite_url 'https://github.com/lh3/seqtk' \\ --help_from_command 'seqtk seq' Explanation of each command options (more here ): id Short identifier for new tool (no whitespace). force Overwrite existing tool if present. name Name for new tool. description Short description for new tool. requirement Name of the package. requirements will be set using Bioconda. example_command Example to command with paths to build Cheetah template from. Must follow with --example_input and --example_output. example_input Replace input file. example_output Replace output file. test_case Generate test-data directory with tool test cases from the supplied example. cite_url Supply a URL for citation. help_from_command Auto populate help from supplied command. Type the following in the same directory where your seqtk.xml is located. $ planemo lint seqtk.xml Tip: Planemo lint command only checks if the syntax is correct, so if you are unable to pass the lint using planemo, check to make sure the above requirements are satisfied. If output says \"Failed linting\" at the end, see the current github issues . Successful output here Functionality test $ planemo t Output: $ planemo t ... All 1 test(s) executed passed. seqtk_seq[0]: passed If error occurs, refer to the error report page on GitHub.","title":"1) Seqtk"},{"location":"planemo/#2-getrandombed","text":"Download getRandomBed.py tool: Use the planemo commands to generate the xml file getRandomBed.xml Solution: planemo tool_init --force \\ --id 'getRandomBed' \\ --name 'Random Bed' \\ --requirement python@2.7.14 \\ --example_command '$__tool_directory__/genRandomBed.py $inputBed' \\ --example_input inputBed \\ --example_output randomBed \\ --test_case \\ --cite_url 'http://www.pughlab.psu.edu/' \\ --help_from_command 'getRandomBed'","title":"2) getRandomBed"},{"location":"planemo/#3-toolexamplepl","text":"Consider the following Perl script. #!/usr/bin/perl -w # usage : perl toolExample.pl FASTA file output file open (IN, \" $ARGV[0]\"); open (OUT, \" $ARGV[1]\"); while ( IN ) { chop; if (m/^ /) { s/^ //; if ($. 1) { print OUT sprintf(\"%.3f\", $gc/$length) . \"\\n\"; } $gc = 0; $length = 0; } else { ++$gc while m/[gc]/ig; $length += length $_; } } print OUT sprintf(\"%.3f\", $gc/$length) . \"\\n\"; close( IN ); close( OUT ); #__end__ Create an xml file for the script with an output as follows: tool id=\"gc_content\" name=\"Compute GC content\" description for each sequence in a file /description command perl $__tool_directory__/gc_content.pl $input output.tsv /command inputs param format=\"fasta\" name=\"input\" type=\"data\" label=\"Source file\"/ /inputs outputs data format=\"tabular\" name=\"output\" from_work_dir=\"output.tsv\" / /outputs help This tool computes GC content from a FASTA file. /help /tool Solution: planemo tool_init --force \\ --id 'gc_content' \\ --name 'Compute GC content' \\ --description 'for each sequence in a file' \\ --example_command 'perl $__tool_directory__/gc_content.pl $input output.tsv' \\ --example_input input.fasta \\ --example_output output.tsv \\ --help 'This tool computes GC content from a FASTA file.' Q: Will this pass the planemo lint test? A: No it is missing the following parameters: test_case, requirement, citation, help_from_command","title":"3) toolExample.pl"}]}